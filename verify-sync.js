import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Cargar configuraci√≥n de producci√≥n
dotenv.config({ path: '.env.production.local' });

const LOCAL_URI = 'mongodb://localhost:27017/planzzz';
const ATLAS_URI = process.env.MONGODB_URI;

async function verifySync() {
  try {
    console.log('üîç Verificando sincronizaci√≥n Local ‚Üî Atlas...');
    
    // Conectar a ambas bases
    const localConn = await mongoose.createConnection(LOCAL_URI);
    const atlasConn = await mongoose.createConnection(ATLAS_URI);
    
    // Esquemas simples para conteo
    const simpleSchema = new mongoose.Schema({}, { strict: false });
    
    const LocalProduct = localConn.model('Product', simpleSchema);
    const LocalCategory = localConn.model('Category', simpleSchema);
    const LocalUser = localConn.model('User', simpleSchema);
    const LocalAdvertisement = localConn.model('Advertisement', simpleSchema);
    
    const AtlasProduct = atlasConn.model('Product', simpleSchema);
    const AtlasCategory = atlasConn.model('Category', simpleSchema);
    const AtlasUser = atlasConn.model('User', simpleSchema);
    const AtlasAdvertisement = atlasConn.model('Advertisement', simpleSchema);
    
    // Verificar conteos
    const localCounts = {
      products: await LocalProduct.countDocuments(),
      categories: await LocalCategory.countDocuments(),
      users: await LocalUser.countDocuments(),
      advertisements: await LocalAdvertisement.countDocuments()
    };
    
    const atlasCounts = {
      products: await AtlasProduct.countDocuments(),
      categories: await AtlasCategory.countDocuments(),
      users: await AtlasUser.countDocuments(),
      advertisements: await AtlasAdvertisement.countDocuments()
    };
    
    console.log('\nüìä RESUMEN DE SINCRONIZACI√ìN:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ Colecci√≥n       ‚îÇ Local   ‚îÇ Atlas   ‚îÇ Estado   ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    
    Object.keys(localCounts).forEach(key => {
      const local = localCounts[key];
      const atlas = atlasCounts[key];
      const status = local === atlas ? '‚úÖ OK' : '‚ùå DIFF';
      console.log(`‚îÇ ${key.padEnd(15)} ‚îÇ ${local.toString().padEnd(7)} ‚îÇ ${atlas.toString().padEnd(7)} ‚îÇ ${status.padEnd(8)} ‚îÇ`);
    });
    
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    
    // Verificar advertisements activos
    const activeAds = await AtlasAdvertisement.find({ isActive: true });
    console.log(`\nüì¢ Advertisements activos en Atlas: ${activeAds.length}`);
    activeAds.forEach(ad => {
      console.log(`   - ${ad.title} (${ad.type})`);
    });
    
    // Verificar categor√≠as activas
    const activeCategories = await AtlasCategory.find({ isActive: true });
    console.log(`\nüìÇ Categor√≠as activas en Atlas: ${activeCategories.length}`);
    activeCategories.forEach(cat => {
      console.log(`   - ${cat.name} (${cat.slug})`);
    });
    
    await localConn.close();
    await atlasConn.close();
    
    console.log('\n‚úÖ Verificaci√≥n completada');
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
    process.exit(1);
  }
}

verifySync();